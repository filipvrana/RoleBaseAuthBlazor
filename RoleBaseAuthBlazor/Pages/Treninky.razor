@page "/treninky"
@inject IHttpContextAccessor httpContextAccessor

<PageTitle>Tréninky</PageTitle>

@using Microsoft.AspNetCore.Mvc.Rendering
@using RoleBaseAuthBlazor.Data
@inject RoleBaseAuthBlazor.Services.IPracticeService practiceService
@inject IDialogService DialogService


<h1>Tréninky</h1>

<AuthorizeView Context="Auth" Roles="Admin, Manager, Coach">
    <MudCard Elevation="25">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">Add / Edit Practices</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <MudDatePicker Label="Start Date" @bind-Date="practice.Date" />
            <MudTextField @bind-Value="practice.Length" Label="Length(min)" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
            <MudTextField @bind-Value="practice.Location" Label="Location" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
            <br />
            <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="Save">Save Practice</MudButton>
        </MudCardContent>
    </MudCard>
</AuthorizeView>
<br />
<MudTable Elevation="25" Items="@practices" Filter="new Func<PracticeDto, bool>(Search)" @bind-customer="practice">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Practices</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search for Practices..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>ID</MudTh>
        <MudTh>Date</MudTh>
        <MudTh>Length(min)</MudTh>
        <MudTh>Location</MudTh>
        <MudTh>Attendance</MudTh>
        <AuthorizeView Context="Auth" Roles="Admin, Manager, Coach">
            <MudTh>Actions</MudTh>
        </AuthorizeView>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Date">@context.Date</MudTd>
        <MudTd DataLabel="Length(min)">@context.Length</MudTd>
        <MudTd DataLabel="Location">@context.Location</MudTd>
        <MudButton @onclick="@(() => OpenModal(@context.Id))" Variant="Variant.Filled" Color="Color.Primary">
            Open Dialog
        </MudButton>
        <AuthorizeView Context="Auth" Roles="Admin, Manager, Coach">
            <MudTd DataLabel="">
                <MudFab @onclick="@(()=>Edit(@context.Id))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
                <MudFab @onclick="@(()=>Delete(@context.Id))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
            </MudTd>
        </AuthorizeView>
        <AuthorizeView Context="Auth" Roles="Admin, Manager, Coach, Player">
            <MudTd DataLabel="">
                @if (context.Attend)
                {
                    <MudFab @onclick="@(() => Attend(@context.Id))" Color="Color.Error" Icon="@Icons.Material.Filled.Remove" Size="Size.Small" IconSize="Size.Small" />
                }
                else
                {
                    <MudFab @onclick="@(() => Attend(@context.Id))" Color="Color.Primary" Icon="@Icons.Material.Filled.Add" Size="Size.Small" IconSize="Size.Small" />
                }
                <span>Stav: @(context.Attend ? "Zúčastním se" : "Nezúčastním se")</span>
            </MudTd>
        </AuthorizeView>

    </RowTemplate>
</MudTable>


@if (ShowPopup)
{
    <!-- This is the popup to create or edit a user -->
    <div class="modal" tabindex="-1" style="display:block" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title">Účastníci tréninku</h3>
                    <!-- Button to close the popup -->
                <button type="button" class="close"
                        @onclick="ClosePopup">
                        <span aria-hidden="true">X</span>
                    </button>
                </div>
                <!-- Edit form for the current user -->
            <div class="modal-body">
                    @if (practice.BlazorUsers == null)
                    {

                    }
                    else
                    {
                        @foreach (var user in practice.BlazorUsers)
                        {
                            <tr>
                                <td>@user.Id.Substring(0, 5)..., </td>
                                <td>@user.UserName, </td>
                                <td>@user.Email</td>
                            </tr>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
}


@code {
    private string searchString = "";
    private PracticeDto practice = new PracticeDto();
    private List<PracticeDto> practices = new List<PracticeDto>();
    public string UserName;
    bool ShowPopup = false;
    public bool AttendBool { get; set; }
    protected override async Task OnInitializedAsync()
    {
        UserName = httpContextAccessor.HttpContext.User.Identity.Name;
        practices = await GetPractices();
    }
    private async Task<List<PracticeDto>> GetPractices()
    {
        practices = await practiceService.GetPractices(UserName);
        return practices;
    }
    private bool Search(PracticeDto practice)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (practice.Date.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase)
        || practice.Length.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || practice.Location.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        return false;
    }
    private async Task Save()
    {
        await practiceService.SavePractice(practice);
        practice = new PracticeDto();
        practices = await practiceService.GetPractices(UserName);
    }

    private async Task Edit(int id)
    {
        practice = practices.FirstOrDefault(c => c.Id == id);
    }
    private async Task Delete(int id)
    {
        practiceService.DeletePractice(id);
        practices = await GetPractices();
    }

    private async Task Attend(int id)
    {
        await practiceService.AttendPractice(id, UserName);
        practices = await GetPractices();
    }

    void ClosePopup()
    {
        // Close the Popup
        ShowPopup = false;
    }

    private async Task OpenModal(int id)
    {
        // Close the Popup
        practice = await practiceService.GetPracticeById(id);
        ShowPopup = true;

    }
}

